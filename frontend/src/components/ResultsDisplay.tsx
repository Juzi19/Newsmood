"use client"

import Link from "next/link";
import { getCookie, getCsrfToken } from "../../lib/frontend";
import { useRef } from "react";

// Type Structure see format of API response

export interface SentimentObject {
    date: string;
    title: string;
    description: string; 
    description_sentiment: number;
    title_sentiment: number;
}

type ResultsStructure = {
    title: string;
    entries: SentimentObject[];
    visible: boolean;
    setVisible: React.Dispatch<React.SetStateAction<boolean>>;
    decisionScore:number;
}

export default function ResultsDisplay(props: ResultsStructure){
    const {title, entries, visible, setVisible, decisionScore} = props;
    const buttonRef = useRef<HTMLButtonElement>(null)
    
    let averageMood = 0;
    for(let entry of entries){
        averageMood += entry.title_sentiment + entry.description_sentiment;
    }
    if(entries.length>0){
        // devide by 2 times entry length since title sentiment and description got added
        averageMood = averageMood/(entries.length*2);
    }
    else {
        averageMood = 0.5;
    }


    /* See calculations for decision score */
    function getSentimentSmiley(sentiment: number):string{
        if(sentiment> 0.66-(decisionScore-0.5)/2){
            return 'üòä'
        }
        else if (sentiment > 0.33-(decisionScore-0.5)/2) {
            return 'üòê'
        }
        else{
            return'üòí'
        }
    }

    async function fetchXLSX(){

        // Animate Text inside the button
        if(buttonRef.current){
            buttonRef.current.innerText = 'L√§dt ‚åö'
        }

        const csrfToken =  getCookie("csrfToken", document);
        if (!csrfToken){
            return
        }
        const res = await fetch('/api/auth/searches/fetch/xlsx', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
                'X-CSRF-Token': csrfToken
            },
            body: JSON.stringify({sentimentObjectArr:entries, name: title})
        });
        if (!res.ok) {
            throw new Error('API request failed.');
        }

        // load file as blob
        const blob = await res.blob();

        // create download link
        const url = window.URL.createObjectURL(blob);
        const link = document.createElement('a');
        link.href = url;

        link.download = `${title || 'file'}.xlsx`;
        document.body.appendChild(link);
        link.click();

        // clean memory
        window.URL.revokeObjectURL(url);
        link.remove();

        // reset button text
        if(buttonRef.current){
            buttonRef.current.innerText = 'XLSX DateiüóÉÔ∏è'
        }
    }

    return(
        <div className={`${visible?'flex':'hidden'} flex-col absolute top-[12vh] left-1/2 transform -translate-x-1/2 bg-white pb-2 min-h-[70vh]`}>
            <div className="w-full flex bg-gray-300 rounded-xl px-2 py-3 items-center justify-center mb-3">
                <div className="w-full flex">
                    <p className="font-bold">Generated by <Link href="/model" className="underline">newsmood AI</Link></p>
                </div>
                <div className="w-full flex justify-end flex-col">
                    <button className="ml-auto my-0.5 bg-black font-bold rounded-xl py-1 px-2 text-gray-50 hover:opacity-80" onClick={()=>{setVisible(false)}}>Schlie√üen ‚ùå</button>
                    <button ref={buttonRef} className="ml-auto my-0.5 bg-black font-bold rounded-xl py-1 px-2 text-gray-50 hover:opacity-80" onClick={()=>fetchXLSX()}>XLSX DateiüóÉÔ∏è</button>
                </div>
                

            </div>
            <h1 className="text-2xl font-bold text-center mb-4">Sentimentanalyse {decodeURI(decodeURI(title))}-News</h1>
            <p className="my-1">Durchschnittliche Stimmung {getSentimentSmiley(averageMood)}</p>
            <small className="text-gray-400">{entries.length} Ergebnisse</small>
            {entries.map((entry, index)=>{
                return(
                    <div key={index}>
                        <h2 className="font-bold mt-2">{entry.title} {getSentimentSmiley(entry.title_sentiment)}</h2>
                        <p className="mb-2">{entry.description} {getSentimentSmiley(entry.description_sentiment)}</p>
                    </div>
                )
            })}
        </div>
    )
}